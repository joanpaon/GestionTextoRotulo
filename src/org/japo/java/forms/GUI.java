/*
 * Copyright 2017 José A. Pacheco Ondoño - joanpaon@gmail.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.japo.java.forms;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import org.japo.java.entities.Modelo;
import org.japo.java.events.DEM;
import org.japo.java.lib.UtilesApp;
import org.japo.java.lib.UtilesModelo;
import org.japo.java.lib.UtilesSwing;

/**
 *
 * @author José A. Pacheco Ondoño - joanpaon@gmail.com
 */
public class GUI extends javax.swing.JFrame {

    // Propiedades APP
    private Properties prpApp;

    // Modelo
    private Modelo modelo;

    // Constructor
    public GUI() {
        // Inicializar GUI - PREVIA
        beforeInit();

        // Construcción - GUI
        initComponents();

        // Inicializar GUI - POSTERIOR
        afterInit();
    }

    // Inicializar GUI - PREVIA
    private void beforeInit() {
        // Restaurar Estado Previo
        restaurarEstado();

        // Generar Modelo
        generarModelo();

        // Otras inicializaciones

    }

    // Inicializar GUI - POSTERIOR
    private void afterInit() {
        // Icono Ventana - Recurso
        URL urlICN = ClassLoader.getSystemResource("img/favicon.png");
        setIconImage(new ImageIcon(urlICN).getImage());

        // Gestión Documento Campo de Texto
        txfTexto.getDocument().addDocumentListener(new DEM(this));

        // Modelo > Interfaz
        sincronizarModeloInterfaz();

        // Enfocar Control Inicial

        // Otras inicializaciones
    }

    // Persistencia > Estado Actual
    private void restaurarEstado() {
        // Carga Propiedades App
        prpApp = UtilesApp.cargarPropiedades();

        // Establece Lnf
        UtilesSwing.establecerLnF(prpApp.getProperty("lnf",
            UtilesSwing.WINDOWS));

        // Activa Singleton
        if (!UtilesApp.activarInstancia(
            prpApp.getProperty("puerto_bloqueo",
                UtilesApp.PUERTO_BLOQUEO))) {
            UtilesSwing.terminarPrograma(this);
        }

        // Otras propiedades
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDisplay = new javax.swing.JPanel();
        lblRotulo = new javax.swing.JLabel();
        pnlAjustes = new javax.swing.JPanel();
        txfTexto = new javax.swing.JTextField();
        pnlControles = new javax.swing.JPanel();
        btnCargar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestión Texto Rótulo");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rótulo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        lblRotulo.setBackground(java.awt.Color.white);
        lblRotulo.setFont(new java.awt.Font("Calibri", 0, 48)); // NOI18N
        lblRotulo.setForeground(java.awt.Color.black);
        lblRotulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRotulo.setText("Texto de Prueba");
        lblRotulo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lblRotulo.setOpaque(true);

        javax.swing.GroupLayout pnlDisplayLayout = new javax.swing.GroupLayout(pnlDisplay);
        pnlDisplay.setLayout(pnlDisplayLayout);
        pnlDisplayLayout.setHorizontalGroup(
            pnlDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDisplayLayout.setVerticalGroup(
            pnlDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRotulo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAjustes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ajustes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        txfTexto.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        txfTexto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfTexto.setText("Texto de Prueba");

        javax.swing.GroupLayout pnlAjustesLayout = new javax.swing.GroupLayout(pnlAjustes);
        pnlAjustes.setLayout(pnlAjustesLayout);
        pnlAjustesLayout.setHorizontalGroup(
            pnlAjustesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAjustesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txfTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAjustesLayout.setVerticalGroup(
            pnlAjustesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAjustesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txfTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlControles.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        btnCargar.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlesLayout = new javax.swing.GroupLayout(pnlControles);
        pnlControles.setLayout(pnlControlesLayout);
        pnlControlesLayout.setHorizontalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlesLayout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
        );
        pnlControlesLayout.setVerticalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargar)
                    .addComponent(btnGuardar))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlAjustes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pnlAjustes, pnlControles, pnlDisplay});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAjustes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        procesarCerrarVentana(evt);
    }//GEN-LAST:event_formWindowClosing

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        procesarImportacionJSON();
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        procesarExportacionJSON();
    }//GEN-LAST:event_btnGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel lblRotulo;
    private javax.swing.JPanel pnlAjustes;
    private javax.swing.JPanel pnlControles;
    private javax.swing.JPanel pnlDisplay;
    private javax.swing.JTextField txfTexto;
    // End of variables declaration//GEN-END:variables
    //
    // Evento de Ventana - Cerrando
    public void procesarCerrarVentana(WindowEvent e) {
        // Memorizar Estado Actual
        memorizarEstado();
    }

    // Estado Actual > Persistencia
    private void memorizarEstado() {
        // Memoriza Estado Actual

        // Guardar Estado Actual
//        UtilesApp.guardarPropiedades(prpApp);
    }

    // Crea el Modelo con sus valores Iniciales
    private void generarModelo() {
        // Dependiendo del supuesto que se trate 
        // La creación del Modelo puede ser muy
        // compleja
        modelo = new Modelo();
    }

    // Interfaz > Modelo
    private void sincronizarInterfazModelo() {

//        // Item 1
//        if (UtilesValidacion.validarDato(
//            txfItem1.getText(), Modelo.ER_ITEM1)) {
//            modelo.setItem1(txfItem1.getText());
//        } else {
//            modelo.setItem1(Modelo.DEF_ITEM1);
//        }
//
//        // Item 2
//        if (UtilesValidacion.validarDato(
//            txfItem2.getText(), Modelo.ER_ITEM2)) {
//            modelo.setItem2(txfItem2.getText());
//        } else {
//            modelo.setItem2(Modelo.DEF_ITEM2);
//        }
//
//        // Item 3
//        if (UtilesValidacion.validarDato(
//            (String) cbbItem3.getSelectedItem(), Modelo.ER_ITEM3)) {
//            modelo.setItem3((String) cbbItem3.getSelectedItem());
//        } else {
//            modelo.setItem3(Modelo.DEF_ITEM3);
//        }
//
//        // Item 4
//        if (UtilesFecha.validarFecha(txfItem4.getText())) {
//            modelo.setItem4(txfItem4.getText());
//        } else {
//            modelo.setItem4(Modelo.DEF_ITEM4);
//        }
//
//        // Item 5
//        if (UtilesValidacion.validarDato(
//            txfItem5.getText(), Modelo.ER_ITEM5)) {
//            modelo.setItem5(txfItem5.getText());
//        } else {
//            modelo.setItem5(Modelo.DEF_ITEM5);
//        }
    }

    // Interfaz > Modelo
    private void sincronizarModeloInterfaz() {
        // Texto
        lblRotulo.setText(modelo.getTexto());
        txfTexto.setText(modelo.getTexto());

        // Fuente
        String familia = modelo.getFamilia();
        int negrita = modelo.isNegrita() ? Font.BOLD : Font.PLAIN;
        int cursiva = modelo.isCursiva() ? Font.ITALIC : Font.PLAIN;
        int talla = modelo.getTalla();
        lblRotulo.setFont(new Font(familia, negrita + cursiva, talla));

        // Frente
        Color frente = new Color(modelo.getFrenteR(),
              modelo.getFrenteV(), modelo.getFrenteA());
        lblRotulo.setForeground(frente);

        // Fondo
        Color fondo = new Color(modelo.getFondoR(),
              modelo.getFondoV(), modelo.getFondoA());
        lblRotulo.setBackground(fondo);
    }

    // Persistencia [CSV] > Modelo > Interfaz
    private void procesarImportacionCSV() {
        try {
            // Fichero de Datos
            String ficheroDatos = prpApp.getProperty("fichero_datos");

            // Separador Items
            String separadorItems = "\\s*,\\s*";

            // Persistencia > Modelo
            UtilesModelo.importarModeloCSV(
                ficheroDatos, separadorItems, modelo);

            // Modelo > Interfaz
            sincronizarModeloInterfaz();

            // Validar Datos Cargados > Interfaz
            comprobarValidez();

            // Mensaje - Importación OK
            String msg = "Datos cargados correctamente";
            JOptionPane.showMessageDialog(this, msg);
        } catch (Exception e) {
            // Mensaje - Importación NO
            String msg = "Error al cargar los datos";
            JOptionPane.showMessageDialog(this, msg);
        }
    }

    // Persistencia [Serialización Binaria] > Modelo > Interfaz
    private void procesarImportacionSBIN() {
        try {
            // Fichero de Datos
            String ficheroDatos = prpApp.getProperty("fichero_datos");

            // Persistencia [Serialización Binaria] > Modelo
            UtilesModelo.importarModeloSBIN(ficheroDatos, modelo);

            // Modelo > Interfaz
            sincronizarModeloInterfaz();

            // Validar Datos Cargados > Interfaz
            comprobarValidez();

            // Mensaje - Importación OK
            String msg = "Datos cargados correctamente";
            JOptionPane.showMessageDialog(this, msg);
        } catch (Exception e) {
            // Mensaje - Importación NO
            String msg = "Error al cargar los datos";
            JOptionPane.showMessageDialog(this, msg);
        }
    }

    // Persistencia [Serialización XML] > Modelo > Interfaz
    private void procesarImportacionXML() {
        try {
            // Fichero de Datos
            String ficheroDatos = prpApp.getProperty("fichero_datos");

            // Persistencia [Serialización Binaria] > Modelo
            UtilesModelo.importarModeloXML(ficheroDatos, modelo);

            // Modelo > Interfaz
            sincronizarModeloInterfaz();

            // Validar Datos Cargados > Interfaz
            comprobarValidez();

            // Mensaje - Importación OK
            String msg = "Datos cargados correctamente";
            JOptionPane.showMessageDialog(this, msg);
        } catch (Exception e) {
            // Mensaje - Importación NO
            String msg = "Error al cargar los datos";
            JOptionPane.showMessageDialog(this, msg);
        }
    }

    // Persistencia [Propiedades de Java] > Modelo > Interfaz
    private void procesarImportacionPRP() {
        try {
            // Fichero de Datos
            String ficheroDatos = prpApp.getProperty("fichero_datos");

            // Persistencia [Serialización Binaria] > Modelo
            UtilesModelo.importarModeloPRP(ficheroDatos, modelo);

            // Modelo > Interfaz
            sincronizarModeloInterfaz();

            // Validar Datos Cargados > Interfaz
            comprobarValidez();

            // Mensaje - Importación OK
            String msg = "Datos cargados correctamente";
            JOptionPane.showMessageDialog(this, msg);
        } catch (Exception e) {
            // Mensaje - Importación NO
            String msg = "Error al cargar los datos";
            JOptionPane.showMessageDialog(this, msg);
        }
    }

    // Persistencia [JSON] > Modelo > Interfaz
    private void procesarImportacionJSON() {
        try {
            // Fichero de Datos
            String ficheroDatos = prpApp.getProperty("fichero_datos");

            // Persistencia [Serialización Binaria] > Modelo
            UtilesModelo.importarModeloJSON(ficheroDatos, modelo);

            // Modelo > Interfaz
            sincronizarModeloInterfaz();

            // Validar Datos Cargados > Interfaz
            comprobarValidez();

            // Mensaje - Importación OK
            String msg = "Datos cargados correctamente";
            JOptionPane.showMessageDialog(this, msg);
        } catch (Exception e) {
            // Mensaje - Importación NO
            String msg = "Error al cargar los datos";
            JOptionPane.showMessageDialog(this, msg);
        }
    }

    // Interfaz > Modelo > Persistencia [CSV]
    private void procesarExportacionCSV() {
        // Validar Datos Interfaz
        if (comprobarValidez()) {
            try {
                // Fichero de Datos
                String ficheroDatos = prpApp.getProperty("fichero_datos");

                // Separador Items
                String separadorItems = "\\s*,\\s*";

                // Interfaz > Modelo
                sincronizarInterfazModelo();

                // Modelo > Persistencia
                UtilesModelo.exportarModeloCSV(
                    ficheroDatos, separadorItems, modelo);

                // Mensaje - Exportación OK
                String msg = "Datos guardados correctamente";
                JOptionPane.showMessageDialog(this, msg);
            } catch (Exception e) {
                // Mensaje - Exportación NO
                String msg = "Error al guardar los datos";
                JOptionPane.showMessageDialog(this, msg);
            }
        } else {
            // Mensaje - Validación Pendiente
            JOptionPane.showMessageDialog(this, "Hay datos erróneos.");
        }
    }

    // Interfaz > Modelo > Persistencia [Serialización Binaria]
    private void procesarExportacionSBIN() {
        // Validar Datos Interfaz
        if (comprobarValidez()) {
            try {
                // Fichero de Datos
                String ficheroDatos = prpApp.getProperty("fichero_datos");

                // Interfaz > Modelo
                sincronizarInterfazModelo();

                // Modelo > Persistencia
                UtilesModelo.exportarModeloSBIN(ficheroDatos, modelo);

                // Mensaje - Exportación OK
                String msg = "Datos guardados correctamente";
                JOptionPane.showMessageDialog(this, msg);
            } catch (Exception e) {
                // Mensaje - Exportación NO
                String msg = "Error al guardar los datos";
                JOptionPane.showMessageDialog(this, msg);
            }
        } else {
            // Mensaje - Validación Pendiente
            JOptionPane.showMessageDialog(this, "Hay datos erróneos.");
        }
    }

    // Interfaz > Modelo > Persistencia [Serialización XML]
    private void procesarExportacionXML() {
        // Validar Datos Interfaz
        if (comprobarValidez()) {
            try {
                // Fichero de Datos
                String ficheroDatos = prpApp.getProperty("fichero_datos");

                // Interfaz > Modelo
                sincronizarInterfazModelo();

                // Modelo > Persistencia
                UtilesModelo.exportarModeloXML(ficheroDatos, modelo);

                // Mensaje - Exportación OK
                String msg = "Datos guardados correctamente";
                JOptionPane.showMessageDialog(this, msg);
            } catch (Exception e) {
                // Mensaje - Exportación NO
                String msg = "Error al guardar los datos";
                JOptionPane.showMessageDialog(this, msg);
            }
        } else {
            // Mensaje - Validación Pendiente
            JOptionPane.showMessageDialog(this, "Hay datos erróneos.");
        }
    }

    // Interfaz > Modelo > Persistencia [Propiedades de Java]
    private void procesarExportacionPRP() {
        // Validar Datos Interfaz
        if (comprobarValidez()) {
            try {
                // Fichero de Datos
                String ficheroDatos = prpApp.getProperty("fichero_datos");

                // Interfaz > Modelo
                sincronizarInterfazModelo();

                // Propiedades > Persistencia
                UtilesModelo.exportarModeloPRP(ficheroDatos, modelo);

                // Mensaje - Exportación OK
                String msg = "Datos guardados correctamente";
                JOptionPane.showMessageDialog(this, msg);
            } catch (Exception e) {
                // Mensaje - Exportación NO
                String msg = "Error al guardar los datos";
                JOptionPane.showMessageDialog(this, msg);
            }
        } else {
            // Mensaje - Validación Pendiente
            JOptionPane.showMessageDialog(this, "Hay datos erróneos.");
        }
    }

    // Interfaz > Modelo > Persistencia [Propiedades de Java]
    private void procesarExportacionJSON() {
        // Validar Datos Interfaz
        if (comprobarValidez()) {
            try {
                // Fichero de Datos
                String ficheroDatos = prpApp.getProperty("fichero_datos");

                // Interfaz > Modelo
                sincronizarInterfazModelo();

                // Propiedades > Persistencia
                UtilesModelo.exportarModeloJSON(ficheroDatos, modelo);

                // Mensaje - Exportación OK
                String msg = "Datos guardados correctamente";
                JOptionPane.showMessageDialog(this, msg);
            } catch (Exception e) {
                // Mensaje - Exportación NO
                String msg = "Error al guardar los datos";
                JOptionPane.showMessageDialog(this, msg);
            }
        } else {
            // Mensaje - Validación Pendiente
            JOptionPane.showMessageDialog(this, "Hay datos erróneos.");
        }
    }

    // Validar Valores Controles Subjetivos
    private boolean comprobarValidez() {
        // Validación Individual
//        boolean item1OK = UtilesValidacion.validarCampoTexto(txfItem1, Modelo.ER_ITEM1, "*");
//        boolean item2OK = UtilesValidacion.validarCampoTexto(txfItem2, Modelo.ER_ITEM2, "*");
//        boolean item4OK = UtilesValidacion.validarCampoFecha(txfItem4, "*");
//        boolean item5OK = UtilesValidacion.validarCampoTexto(txfItem5, Modelo.ER_ITEM5, "*");

        // Validación Conjunta
//        return item1OK && item2OK && item4OK && item5OK;
        return true;
    }

    private void procesarFamilia() {
        // Interfaz > modelo
//        modelo.setFamilia((String) cbbFamilia.getSelectedItem());

        // Modelo > Interfaz
        sincronizarModeloInterfaz();
    }

    // Cambios en un Campo de Texto
    public void procesarCambioTexto(DocumentEvent e) {
        // Campo de Texto > Etiqueta
        lblRotulo.setText(txfTexto.getText());
    }

}
